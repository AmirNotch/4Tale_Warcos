// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserProfile.Models;

#nullable disable

namespace UserProfile.Migrations
{
    [DbContext(typeof(WarcosUserProfileDbContext))]
    [Migration("20241025114356_User_Profiles")]
    partial class User_Profiles
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.Property<Guid>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("achievement_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RequirementType")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_type");

                    b.Property<int>("RequirementValue")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_value");

                    b.Property<Guid>("RewardItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("reward_item_id");

                    b.Property<int>("RewardType")
                        .HasColumnType("integer")
                        .HasColumnName("reward_type");

                    b.HasKey("AchievementId");

                    b.HasIndex("RewardItemId");

                    b.ToTable("achievements", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("item_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UnrealId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ItemId");

                    b.ToTable("items", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<int>("ExperiencePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience_points");

                    b.HasKey("LevelId");

                    b.ToTable("levels", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.LevelReward", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_name");

                    b.Property<int>("RewardType")
                        .HasColumnType("integer")
                        .HasColumnName("reward_type");

                    b.HasKey("LevelId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LevelId")
                        .IsUnique();

                    b.ToTable("level_rewards", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.UserAchievement", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("AchievedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("achieved_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("user_achievements", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Assists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assists");

                    b.Property<int>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deaths");

                    b.Property<int>("HeadshotKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshot_kills");

                    b.Property<int>("KillStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kill_streak");

                    b.Property<int>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<int>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("losses");

                    b.Property<int>("MatchesPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("matches_played");

                    b.Property<int>("MeleeKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("melee_kills");

                    b.Property<TimeSpan>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasColumnName("play_time")
                        .HasDefaultValueSql("INTERVAL '0'");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wins");

                    b.HasKey("UserId");

                    b.HasIndex("LevelId");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.HasOne("UserProfile.Models.db.Item", "RewardItem")
                        .WithMany("AchievementRewards")
                        .HasForeignKey("RewardItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RewardItem");
                });

            modelBuilder.Entity("UserProfile.Models.db.LevelReward", b =>
                {
                    b.HasOne("UserProfile.Models.db.Item", "Item")
                        .WithMany("LevelRewards")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserProfile.Models.db.Level", "Level")
                        .WithOne("Reward")
                        .HasForeignKey("UserProfile.Models.db.LevelReward", "LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserAchievement", b =>
                {
                    b.HasOne("UserProfile.Models.db.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserProfile.Models.db.UserProfile", "UserProfile")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.HasOne("UserProfile.Models.db.Level", "Level")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("UserProfile.Models.db.Item", b =>
                {
                    b.Navigation("AchievementRewards");

                    b.Navigation("LevelRewards");
                });

            modelBuilder.Entity("UserProfile.Models.db.Level", b =>
                {
                    b.Navigation("Reward")
                        .IsRequired();

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.Navigation("UserAchievements");
                });
#pragma warning restore 612, 618
        }
    }
}
