// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UserProfile.Models;

#nullable disable

namespace UserProfile.Migrations
{
    [DbContext(typeof(WarcosUserProfileDbContext))]
    [Migration("20241028104144_Added_UserProfileTransactions")]
    partial class Added_UserProfileTransactions
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.Property<Guid>("AchievementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("achievement_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<int>("RequirementType")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_type");

                    b.Property<int>("RequirementValue")
                        .HasColumnType("integer")
                        .HasColumnName("requirement_value");

                    b.Property<Guid>("RewardItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("reward_item_id");

                    b.Property<int>("RewardType")
                        .HasColumnType("integer")
                        .HasColumnName("reward_type");

                    b.HasKey("AchievementId");

                    b.HasIndex("RewardItemId");

                    b.ToTable("achievements", (string)null);

                    b.HasData(
                        new
                        {
                            AchievementId = new Guid("e3cf5e22-d6c6-49fb-850e-ae16306deb19"),
                            Name = "First Blood",
                            RequirementType = 3,
                            RequirementValue = 1,
                            RewardItemId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            RewardType = 2
                        },
                        new
                        {
                            AchievementId = new Guid("28825d5e-9061-47d3-9bf1-7737d030adb3"),
                            Name = "Sharp Shooter",
                            RequirementType = 0,
                            RequirementValue = 10,
                            RewardItemId = new Guid("987f6543-a21b-34d2-c321-765432109876"),
                            RewardType = 2
                        },
                        new
                        {
                            AchievementId = new Guid("94577782-978b-4829-be0e-456215ccf47d"),
                            Name = "Unstoppable",
                            RequirementType = 4,
                            RequirementValue = 5,
                            RewardItemId = new Guid("4567d890-1234-56d7-e890-123456789012"),
                            RewardType = 2
                        },
                        new
                        {
                            AchievementId = new Guid("11292e61-3cbb-49b7-9910-4d11e1ee33dc"),
                            Name = "Master Tactician",
                            RequirementType = 2,
                            RequirementValue = 50,
                            RewardItemId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            RewardType = 2
                        },
                        new
                        {
                            AchievementId = new Guid("f4fb5488-8f03-4e95-9fea-76640973d33c"),
                            Name = "Marathon Runner",
                            RequirementType = 5,
                            RequirementValue = 1440,
                            RewardItemId = new Guid("fedc4321-ba98-76d5-c432-109876543210"),
                            RewardType = 2
                        });
                });

            modelBuilder.Entity("UserProfile.Models.db.Item", b =>
                {
                    b.Property<Guid>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("item_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UnrealId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("ItemId");

                    b.ToTable("items", (string)null);

                    b.HasData(
                        new
                        {
                            ItemId = new Guid("123e4567-e89b-12d3-a456-426614174000"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8685),
                            UnrealId = "combat_helmet"
                        },
                        new
                        {
                            ItemId = new Guid("987f6543-a21b-34d2-c321-765432109876"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8689),
                            UnrealId = "high_precision_scope"
                        },
                        new
                        {
                            ItemId = new Guid("4567d890-1234-56d7-e890-123456789012"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8692),
                            UnrealId = "armor_piercing_ammo"
                        },
                        new
                        {
                            ItemId = new Guid("a1b2c3d4-e5f6-7890-abcd-ef1234567890"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8695),
                            UnrealId = "advanced_grenade"
                        },
                        new
                        {
                            ItemId = new Guid("fedc4321-ba98-76d5-c432-109876543210"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8698),
                            UnrealId = "reinforced_armor"
                        },
                        new
                        {
                            ItemId = new Guid("650edfbf-8e64-4381-ba48-6aa5bc4b978d"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8710),
                            UnrealId = "urban_camo_skin"
                        },
                        new
                        {
                            ItemId = new Guid("dade044f-09b6-4e60-b526-62d18844fd2a"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8713),
                            UnrealId = "desert_storm_skin"
                        },
                        new
                        {
                            ItemId = new Guid("e941dbdf-9d4a-4130-8855-19432e42dcad"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8717),
                            UnrealId = "jungle_warfare_skin"
                        },
                        new
                        {
                            ItemId = new Guid("b5877b11-5977-4168-b9bf-c4f1d81ae689"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8720),
                            UnrealId = "night_ops_skin"
                        },
                        new
                        {
                            ItemId = new Guid("cae5c7ba-8b41-44ba-86c6-ac13731f8acc"),
                            CreatedAt = new DateTime(2024, 10, 28, 10, 41, 43, 97, DateTimeKind.Utc).AddTicks(8723),
                            UnrealId = "golden_dragon_skin"
                        });
                });

            modelBuilder.Entity("UserProfile.Models.db.Level", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("level");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<int>("ExperiencePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience_points");

                    b.HasKey("LevelId");

                    b.ToTable("levels", (string)null);

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            ExperiencePoints = 1000
                        },
                        new
                        {
                            LevelId = 2,
                            ExperiencePoints = 2000
                        },
                        new
                        {
                            LevelId = 3,
                            ExperiencePoints = 4000
                        },
                        new
                        {
                            LevelId = 4,
                            ExperiencePoints = 7000
                        },
                        new
                        {
                            LevelId = 5,
                            ExperiencePoints = 10000
                        },
                        new
                        {
                            LevelId = 6,
                            ExperiencePoints = 13000
                        },
                        new
                        {
                            LevelId = 7,
                            ExperiencePoints = 18000
                        },
                        new
                        {
                            LevelId = 8,
                            ExperiencePoints = 23000
                        },
                        new
                        {
                            LevelId = 9,
                            ExperiencePoints = 29000
                        },
                        new
                        {
                            LevelId = 10,
                            ExperiencePoints = 35000
                        });
                });

            modelBuilder.Entity("UserProfile.Models.db.LevelReward", b =>
                {
                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<string>("RewardName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("reward_name");

                    b.Property<int>("RewardType")
                        .HasColumnType("integer")
                        .HasColumnName("reward_type");

                    b.HasKey("LevelId", "ItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("LevelId")
                        .IsUnique();

                    b.ToTable("level_rewards", (string)null);

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            ItemId = new Guid("650edfbf-8e64-4381-ba48-6aa5bc4b978d"),
                            RewardName = "Urban Camo Skin",
                            RewardType = 0
                        },
                        new
                        {
                            LevelId = 2,
                            ItemId = new Guid("dade044f-09b6-4e60-b526-62d18844fd2a"),
                            RewardName = "Desert Storm Skin",
                            RewardType = 0
                        },
                        new
                        {
                            LevelId = 3,
                            ItemId = new Guid("e941dbdf-9d4a-4130-8855-19432e42dcad"),
                            RewardName = "Jungle Warfare Skin",
                            RewardType = 0
                        },
                        new
                        {
                            LevelId = 4,
                            ItemId = new Guid("b5877b11-5977-4168-b9bf-c4f1d81ae689"),
                            RewardName = "Night Ops Skin",
                            RewardType = 0
                        },
                        new
                        {
                            LevelId = 5,
                            ItemId = new Guid("cae5c7ba-8b41-44ba-86c6-ac13731f8acc"),
                            RewardName = "Golden Dragon Skin",
                            RewardType = 0
                        });
                });

            modelBuilder.Entity("UserProfile.Models.db.UserAchievement", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<Guid>("AchievementId")
                        .HasColumnType("uuid")
                        .HasColumnName("achievement_id");

                    b.Property<DateTime>("AchievedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("achieved_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("UserId", "AchievementId");

                    b.HasIndex("AchievementId");

                    b.ToTable("user_achievements", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Assists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assists");

                    b.Property<int>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deaths");

                    b.Property<int>("ExperiencePoints")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("experience_points");

                    b.Property<int>("HeadshotKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("headshot_kills");

                    b.Property<int>("KillStreak")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kill_streak");

                    b.Property<int>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<int>("Losses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("losses");

                    b.Property<int>("MatchesPlayed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("matches_played");

                    b.Property<int>("MeleeKills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("melee_kills");

                    b.Property<TimeSpan>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasColumnName("play_time")
                        .HasDefaultValueSql("INTERVAL '0'");

                    b.Property<int>("Wins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("wins");

                    b.HasKey("UserId");

                    b.HasIndex("LevelId");

                    b.ToTable("user_profiles", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfileStatsHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<int>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<int>("Deaths")
                        .HasColumnType("integer")
                        .HasColumnName("deaths");

                    b.Property<int>("ExperiencePoints")
                        .HasColumnType("integer")
                        .HasColumnName("experience_points");

                    b.Property<int>("HeadshotKills")
                        .HasColumnType("integer")
                        .HasColumnName("headshot_kills");

                    b.Property<int>("KillStreak")
                        .HasColumnType("integer")
                        .HasColumnName("kill_streak");

                    b.Property<int>("Kills")
                        .HasColumnType("integer")
                        .HasColumnName("kills");

                    b.Property<int>("LevelId")
                        .HasColumnType("integer")
                        .HasColumnName("level_id");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasColumnName("losses");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("integer")
                        .HasColumnName("matches_played");

                    b.Property<int>("MeleeKills")
                        .HasColumnType("integer")
                        .HasColumnName("melee_kills");

                    b.Property<TimeSpan>("PlayTime")
                        .HasColumnType("interval")
                        .HasColumnName("play_time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("LevelId");

                    b.HasIndex("UserId");

                    b.ToTable("user_profile_stats_history", (string)null);
                });

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.HasOne("UserProfile.Models.db.Item", "RewardItem")
                        .WithMany("AchievementRewards")
                        .HasForeignKey("RewardItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RewardItem");
                });

            modelBuilder.Entity("UserProfile.Models.db.LevelReward", b =>
                {
                    b.HasOne("UserProfile.Models.db.Item", "Item")
                        .WithMany("LevelRewards")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserProfile.Models.db.Level", "Level")
                        .WithOne("Reward")
                        .HasForeignKey("UserProfile.Models.db.LevelReward", "LevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Level");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserAchievement", b =>
                {
                    b.HasOne("UserProfile.Models.db.Achievement", "Achievement")
                        .WithMany("UserAchievements")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UserProfile.Models.db.UserProfile", "UserProfile")
                        .WithMany("UserAchievements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.HasOne("UserProfile.Models.db.Level", "Level")
                        .WithMany("UserProfiles")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfileStatsHistory", b =>
                {
                    b.HasOne("UserProfile.Models.db.Level", "Level")
                        .WithMany("UserProfileStatsHistories")
                        .HasForeignKey("LevelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("UserProfile.Models.db.UserProfile", "UserProfile")
                        .WithMany("UserProfileStatsHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Level");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("UserProfile.Models.db.Achievement", b =>
                {
                    b.Navigation("UserAchievements");
                });

            modelBuilder.Entity("UserProfile.Models.db.Item", b =>
                {
                    b.Navigation("AchievementRewards");

                    b.Navigation("LevelRewards");
                });

            modelBuilder.Entity("UserProfile.Models.db.Level", b =>
                {
                    b.Navigation("Reward")
                        .IsRequired();

                    b.Navigation("UserProfileStatsHistories");

                    b.Navigation("UserProfiles");
                });

            modelBuilder.Entity("UserProfile.Models.db.UserProfile", b =>
                {
                    b.Navigation("UserAchievements");

                    b.Navigation("UserProfileStatsHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
