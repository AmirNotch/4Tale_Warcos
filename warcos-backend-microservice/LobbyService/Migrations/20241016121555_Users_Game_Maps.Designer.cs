// <auto-generated />
using System;
using Lobby.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Lobby.Migrations
{
    [DbContext(typeof(WarcosLobbyDbContext))]
    [Migration("20241016121555_Users_Game_Maps")]
    partial class Users_Game_Maps
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "btree_gist");
            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "uuid-ossp");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Lobby.Models.db.Game", b =>
                {
                    b.Property<Guid>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("game_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid>("GameRegimeEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_regime_entry_id");

                    b.Property<string>("GameServerUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_server_url");

                    b.Property<string>("GameStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("CONFIRMATION")
                        .HasColumnName("game_status");

                    b.HasKey("GameId");

                    b.HasIndex("GameRegimeEntryId");

                    b.ToTable("games", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.GameMode", b =>
                {
                    b.Property<string>("GameModeKind")
                        .HasColumnType("text")
                        .HasColumnName("game_mode_kind");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsTeam")
                        .HasColumnType("boolean")
                        .HasColumnName("is_team");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("integer")
                        .HasColumnName("number_of_players");

                    b.HasKey("GameModeKind");

                    b.ToTable("game_modes", (string)null);

                    b.HasData(
                        new
                        {
                            GameModeKind = "TEAM_FIGHT",
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 18, DateTimeKind.Unspecified).AddTicks(9816), new TimeSpan(0, 0, 0, 0, 0)),
                            IsTeam = true,
                            NumberOfPlayers = 12
                        });
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegime", b =>
                {
                    b.Property<string>("GameRegimeKind")
                        .HasColumnType("text")
                        .HasColumnName("game_regime_kind");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.HasKey("GameRegimeKind");

                    b.HasIndex("GameMode");

                    b.ToTable("game_regimes", (string)null);

                    b.HasData(
                        new
                        {
                            GameRegimeKind = "CAPTURE_POINT",
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 20, DateTimeKind.Unspecified).AddTicks(9038), new TimeSpan(0, 0, 0, 0, 0)),
                            GameMode = "TEAM_FIGHT"
                        });
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegimeEntry", b =>
                {
                    b.Property<Guid>("GameRegimeEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("game_regime_entry_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GameMode")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.Property<string>("GameRegime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_regime");

                    b.Property<string>("MapKind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map_kind");

                    b.HasKey("GameRegimeEntryId");

                    b.HasIndex("GameRegime");

                    b.HasIndex("MapKind");

                    b.HasIndex("GameMode", "GameRegime", "MapKind")
                        .IsUnique();

                    b.ToTable("game_regime_entries", (string)null);

                    b.HasData(
                        new
                        {
                            GameRegimeEntryId = new Guid("c53427e4-e29b-411a-bbb7-4f8005130878"),
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 22, DateTimeKind.Unspecified).AddTicks(9653), new TimeSpan(0, 0, 0, 0, 0)),
                            GameMode = "TEAM_FIGHT",
                            GameRegime = "CAPTURE_POINT",
                            MapKind = "L_Freeport"
                        },
                        new
                        {
                            GameRegimeEntryId = new Guid("ecc0d782-c0c7-4a82-a164-1a878964e57e"),
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 22, DateTimeKind.Unspecified).AddTicks(9657), new TimeSpan(0, 0, 0, 0, 0)),
                            GameMode = "TEAM_FIGHT",
                            GameRegime = "CAPTURE_POINT",
                            MapKind = "L_Airport"
                        },
                        new
                        {
                            GameRegimeEntryId = new Guid("461fb474-c5af-4dec-9fe5-2bf52fcfccc5"),
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 22, DateTimeKind.Unspecified).AddTicks(9660), new TimeSpan(0, 0, 0, 0, 0)),
                            GameMode = "TEAM_FIGHT",
                            GameRegime = "CAPTURE_POINT",
                            MapKind = "L_Hotel"
                        });
                });

            modelBuilder.Entity("Lobby.Models.db.GameToUser", b =>
                {
                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<int>("Assists")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("assists");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("deaths");

                    b.Property<bool>("IsConfirmedGameStart")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed_game_start");

                    b.Property<int>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0)
                        .HasColumnName("kills");

                    b.Property<DateTimeOffset?>("Removed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed");

                    b.Property<int>("Squad")
                        .HasColumnType("integer")
                        .HasColumnName("squad");

                    b.Property<int>("Team")
                        .HasColumnType("integer")
                        .HasColumnName("team");

                    b.HasKey("GameId", "UserId");

                    b.HasIndex("UserId", "GameId")
                        .HasDatabaseName("game_to_user_back_order_idx");

                    b.ToTable("game_to_user", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.Map", b =>
                {
                    b.Property<string>("MapKind")
                        .HasColumnType("text")
                        .HasColumnName("map_kind");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("MapKind");

                    b.ToTable("maps", (string)null);

                    b.HasData(
                        new
                        {
                            MapKind = "L_Freeport",
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 25, DateTimeKind.Unspecified).AddTicks(2748), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            MapKind = "L_Airport",
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 25, DateTimeKind.Unspecified).AddTicks(2752), new TimeSpan(0, 0, 0, 0, 0))
                        },
                        new
                        {
                            MapKind = "L_Hotel",
                            Created = new DateTimeOffset(new DateTime(2024, 10, 16, 12, 15, 55, 25, DateTimeKind.Unspecified).AddTicks(2754), new TimeSpan(0, 0, 0, 0, 0))
                        });
                });

            modelBuilder.Entity("Lobby.Models.db.Party", b =>
                {
                    b.Property<Guid>("PartyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("party_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<Guid?>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("LeaderUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("leader_user_id");

                    b.Property<DateTimeOffset?>("Removed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed");

                    b.Property<int>("Size")
                        .HasColumnType("integer")
                        .HasColumnName("size");

                    b.Property<string>("TicketId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ticket_id");

                    b.HasKey("PartyId");

                    b.HasIndex("GameId");

                    b.HasIndex("LeaderUserId");

                    b.ToTable("parties", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.PartyToUser", b =>
                {
                    b.Property<Guid>("PartyId")
                        .HasColumnType("uuid")
                        .HasColumnName("party_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool>("IsConfirmedPartyPartaking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_confirmed_party_partaking");

                    b.Property<DateTimeOffset?>("Removed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed");

                    b.HasKey("PartyId", "UserId");

                    b.HasIndex("UserId", "PartyId");

                    b.ToTable("party_to_user", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.ScheduledGameRegime", b =>
                {
                    b.Property<string>("GameMode")
                        .HasColumnType("text")
                        .HasColumnName("game_mode");

                    b.Property<DateTimeOffset>("IntervalStart")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("interval_start");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("GameRegime")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("game_regime");

                    b.Property<Guid>("GameRegimeEntryId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_regime_entry_id");

                    b.Property<DateTimeOffset>("IntervalEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("interval_end");

                    b.Property<string>("MapKind")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("map_kind");

                    b.HasKey("GameMode", "IntervalStart");

                    b.HasIndex("GameRegime");

                    b.HasIndex("GameRegimeEntryId");

                    b.HasIndex("MapKind");

                    b.ToTable("scheduled_game_regimes", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id")
                        .HasDefaultValueSql("uuid_generate_v4()");

                    b.Property<DateTimeOffset>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTimeOffset?>("Removed")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("removed");

                    b.HasKey("UserId");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Lobby.Models.db.Game", b =>
                {
                    b.HasOne("Lobby.Models.db.GameRegimeEntry", "GameRegimeEntry")
                        .WithMany("Games")
                        .HasForeignKey("GameRegimeEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameRegimeEntry");
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegime", b =>
                {
                    b.HasOne("Lobby.Models.db.GameMode", "GameModeKindNavigation")
                        .WithMany("GameRegimes")
                        .HasForeignKey("GameMode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameModeKindNavigation");
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegimeEntry", b =>
                {
                    b.HasOne("Lobby.Models.db.GameMode", "GameModeNavigation")
                        .WithMany("GameRegimeEntries")
                        .HasForeignKey("GameMode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.GameRegime", "GameRegimeNavigation")
                        .WithMany("GameRegimeEntries")
                        .HasForeignKey("GameRegime")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.Map", "MapKindNavigation")
                        .WithMany("GameRegimeEntries")
                        .HasForeignKey("MapKind")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameModeNavigation");

                    b.Navigation("GameRegimeNavigation");

                    b.Navigation("MapKindNavigation");
                });

            modelBuilder.Entity("Lobby.Models.db.GameToUser", b =>
                {
                    b.HasOne("Lobby.Models.db.Game", "Game")
                        .WithMany("GameToUsers")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.User", "User")
                        .WithMany("GameToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lobby.Models.db.Party", b =>
                {
                    b.HasOne("Lobby.Models.db.Game", "Game")
                        .WithMany("Parties")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Lobby.Models.db.User", "LeaderUser")
                        .WithMany("Parties")
                        .HasForeignKey("LeaderUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("LeaderUser");
                });

            modelBuilder.Entity("Lobby.Models.db.PartyToUser", b =>
                {
                    b.HasOne("Lobby.Models.db.Party", "Party")
                        .WithMany("PartyToUsers")
                        .HasForeignKey("PartyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.User", "User")
                        .WithMany("PartyToUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Party");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Lobby.Models.db.ScheduledGameRegime", b =>
                {
                    b.HasOne("Lobby.Models.db.GameMode", "GameModeNavigation")
                        .WithMany("ScheduledGameRegimes")
                        .HasForeignKey("GameMode")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.GameRegime", "GameRegimeNavigation")
                        .WithMany("ScheduledGameRegimes")
                        .HasForeignKey("GameRegime")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.GameRegimeEntry", "GameRegimeEntryNavigation")
                        .WithMany("ScheduledGameRegimes")
                        .HasForeignKey("GameRegimeEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Lobby.Models.db.Map", "MapKindNavigation")
                        .WithMany("ScheduledGameRegimes")
                        .HasForeignKey("MapKind")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("GameModeNavigation");

                    b.Navigation("GameRegimeEntryNavigation");

                    b.Navigation("GameRegimeNavigation");

                    b.Navigation("MapKindNavigation");
                });

            modelBuilder.Entity("Lobby.Models.db.Game", b =>
                {
                    b.Navigation("GameToUsers");

                    b.Navigation("Parties");
                });

            modelBuilder.Entity("Lobby.Models.db.GameMode", b =>
                {
                    b.Navigation("GameRegimeEntries");

                    b.Navigation("GameRegimes");

                    b.Navigation("ScheduledGameRegimes");
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegime", b =>
                {
                    b.Navigation("GameRegimeEntries");

                    b.Navigation("ScheduledGameRegimes");
                });

            modelBuilder.Entity("Lobby.Models.db.GameRegimeEntry", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("ScheduledGameRegimes");
                });

            modelBuilder.Entity("Lobby.Models.db.Map", b =>
                {
                    b.Navigation("GameRegimeEntries");

                    b.Navigation("ScheduledGameRegimes");
                });

            modelBuilder.Entity("Lobby.Models.db.Party", b =>
                {
                    b.Navigation("PartyToUsers");
                });

            modelBuilder.Entity("Lobby.Models.db.User", b =>
                {
                    b.Navigation("GameToUsers");

                    b.Navigation("Parties");

                    b.Navigation("PartyToUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
