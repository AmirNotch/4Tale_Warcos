// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: frontend.proto
// </auto-generated>
// Original file comments:
// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#pragma warning disable 0414, 1591, 8981, 0612
#region Designer generated code

using grpc = global::Grpc.Core;

namespace OpenMatch {
  /// <summary>
  /// The FrontendService implements APIs to manage and query status of a Tickets.
  /// </summary>
  public static partial class FrontendService
  {
    static readonly string __ServiceName = "openmatch.FrontendService";

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.CreateTicketRequest> __Marshaller_openmatch_CreateTicketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.CreateTicketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.Ticket> __Marshaller_openmatch_Ticket = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.Ticket.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.DeleteTicketRequest> __Marshaller_openmatch_DeleteTicketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.DeleteTicketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::Google.Protobuf.WellKnownTypes.Empty> __Marshaller_google_protobuf_Empty = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Google.Protobuf.WellKnownTypes.Empty.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.GetTicketRequest> __Marshaller_openmatch_GetTicketRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.GetTicketRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.WatchAssignmentsRequest> __Marshaller_openmatch_WatchAssignmentsRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.WatchAssignmentsRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.WatchAssignmentsResponse> __Marshaller_openmatch_WatchAssignmentsResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.WatchAssignmentsResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.AcknowledgeBackfillRequest> __Marshaller_openmatch_AcknowledgeBackfillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.AcknowledgeBackfillRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.AcknowledgeBackfillResponse> __Marshaller_openmatch_AcknowledgeBackfillResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.AcknowledgeBackfillResponse.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.CreateBackfillRequest> __Marshaller_openmatch_CreateBackfillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.CreateBackfillRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.Backfill> __Marshaller_openmatch_Backfill = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.Backfill.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.DeleteBackfillRequest> __Marshaller_openmatch_DeleteBackfillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.DeleteBackfillRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.GetBackfillRequest> __Marshaller_openmatch_GetBackfillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.GetBackfillRequest.Parser));
    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Marshaller<global::OpenMatch.UpdateBackfillRequest> __Marshaller_openmatch_UpdateBackfillRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::OpenMatch.UpdateBackfillRequest.Parser));

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.CreateTicketRequest, global::OpenMatch.Ticket> __Method_CreateTicket = new grpc::Method<global::OpenMatch.CreateTicketRequest, global::OpenMatch.Ticket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateTicket",
        __Marshaller_openmatch_CreateTicketRequest,
        __Marshaller_openmatch_Ticket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.DeleteTicketRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteTicket = new grpc::Method<global::OpenMatch.DeleteTicketRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteTicket",
        __Marshaller_openmatch_DeleteTicketRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.GetTicketRequest, global::OpenMatch.Ticket> __Method_GetTicket = new grpc::Method<global::OpenMatch.GetTicketRequest, global::OpenMatch.Ticket>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetTicket",
        __Marshaller_openmatch_GetTicketRequest,
        __Marshaller_openmatch_Ticket);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.WatchAssignmentsRequest, global::OpenMatch.WatchAssignmentsResponse> __Method_WatchAssignments = new grpc::Method<global::OpenMatch.WatchAssignmentsRequest, global::OpenMatch.WatchAssignmentsResponse>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "WatchAssignments",
        __Marshaller_openmatch_WatchAssignmentsRequest,
        __Marshaller_openmatch_WatchAssignmentsResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.AcknowledgeBackfillRequest, global::OpenMatch.AcknowledgeBackfillResponse> __Method_AcknowledgeBackfill = new grpc::Method<global::OpenMatch.AcknowledgeBackfillRequest, global::OpenMatch.AcknowledgeBackfillResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "AcknowledgeBackfill",
        __Marshaller_openmatch_AcknowledgeBackfillRequest,
        __Marshaller_openmatch_AcknowledgeBackfillResponse);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.CreateBackfillRequest, global::OpenMatch.Backfill> __Method_CreateBackfill = new grpc::Method<global::OpenMatch.CreateBackfillRequest, global::OpenMatch.Backfill>(
        grpc::MethodType.Unary,
        __ServiceName,
        "CreateBackfill",
        __Marshaller_openmatch_CreateBackfillRequest,
        __Marshaller_openmatch_Backfill);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.DeleteBackfillRequest, global::Google.Protobuf.WellKnownTypes.Empty> __Method_DeleteBackfill = new grpc::Method<global::OpenMatch.DeleteBackfillRequest, global::Google.Protobuf.WellKnownTypes.Empty>(
        grpc::MethodType.Unary,
        __ServiceName,
        "DeleteBackfill",
        __Marshaller_openmatch_DeleteBackfillRequest,
        __Marshaller_google_protobuf_Empty);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.GetBackfillRequest, global::OpenMatch.Backfill> __Method_GetBackfill = new grpc::Method<global::OpenMatch.GetBackfillRequest, global::OpenMatch.Backfill>(
        grpc::MethodType.Unary,
        __ServiceName,
        "GetBackfill",
        __Marshaller_openmatch_GetBackfillRequest,
        __Marshaller_openmatch_Backfill);

    [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
    static readonly grpc::Method<global::OpenMatch.UpdateBackfillRequest, global::OpenMatch.Backfill> __Method_UpdateBackfill = new grpc::Method<global::OpenMatch.UpdateBackfillRequest, global::OpenMatch.Backfill>(
        grpc::MethodType.Unary,
        __ServiceName,
        "UpdateBackfill",
        __Marshaller_openmatch_UpdateBackfillRequest,
        __Marshaller_openmatch_Backfill);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::OpenMatch.FrontendReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for FrontendService</summary>
    public partial class FrontendServiceClient : grpc::ClientBase<FrontendServiceClient>
    {
      /// <summary>Creates a new client for FrontendService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FrontendServiceClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for FrontendService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public FrontendServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FrontendServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected FrontendServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      /// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
      /// A ticket is considered as ready for matchmaking once it is created.
      ///   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
      ///   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Ticket CreateTicket(global::OpenMatch.CreateTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
      /// A ticket is considered as ready for matchmaking once it is created.
      ///   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
      ///   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Ticket CreateTicket(global::OpenMatch.CreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateTicket, null, options, request);
      }
      /// <summary>
      /// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
      /// A ticket is considered as ready for matchmaking once it is created.
      ///   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
      ///   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> CreateTicketAsync(global::OpenMatch.CreateTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateTicket assigns an unique TicketId to the input Ticket and record it in state storage.
      /// A ticket is considered as ready for matchmaking once it is created.
      ///   - If a TicketId exists in a Ticket request, an auto-generated TicketId will override this field.
      ///   - If SearchFields exist in a Ticket, CreateTicket will also index these fields such that one can query the ticket with query.QueryTickets function.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> CreateTicketAsync(global::OpenMatch.CreateTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateTicket, null, options, request);
      }
      /// <summary>
      /// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
      /// The client should delete the Ticket when finished matchmaking with it. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTicket(global::OpenMatch.DeleteTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
      /// The client should delete the Ticket when finished matchmaking with it. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteTicket(global::OpenMatch.DeleteTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteTicket, null, options, request);
      }
      /// <summary>
      /// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
      /// The client should delete the Ticket when finished matchmaking with it. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTicketAsync(global::OpenMatch.DeleteTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteTicket immediately stops Open Match from using the Ticket for matchmaking and removes the Ticket from state storage.
      /// The client should delete the Ticket when finished matchmaking with it. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteTicketAsync(global::OpenMatch.DeleteTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteTicket, null, options, request);
      }
      /// <summary>
      /// GetTicket get the Ticket associated with the specified TicketId.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Ticket GetTicket(global::OpenMatch.GetTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTicket(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTicket get the Ticket associated with the specified TicketId.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Ticket GetTicket(global::OpenMatch.GetTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetTicket, null, options, request);
      }
      /// <summary>
      /// GetTicket get the Ticket associated with the specified TicketId.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> GetTicketAsync(global::OpenMatch.GetTicketRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetTicketAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetTicket get the Ticket associated with the specified TicketId.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Ticket> GetTicketAsync(global::OpenMatch.GetTicketRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetTicket, null, options, request);
      }
      /// <summary>
      /// WatchAssignments stream back Assignment of the specified TicketId if it is updated.
      ///   - If the Assignment is not updated, GetAssignment will retry using the configured backoff strategy. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.WatchAssignmentsResponse> WatchAssignments(global::OpenMatch.WatchAssignmentsRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return WatchAssignments(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// WatchAssignments stream back Assignment of the specified TicketId if it is updated.
      ///   - If the Assignment is not updated, GetAssignment will retry using the configured backoff strategy. 
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncServerStreamingCall<global::OpenMatch.WatchAssignmentsResponse> WatchAssignments(global::OpenMatch.WatchAssignmentsRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncServerStreamingCall(__Method_WatchAssignments, null, options, request);
      }
      /// <summary>
      /// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
      /// This triggers an assignment process.
      /// BETA FEATURE WARNING: This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.AcknowledgeBackfillResponse AcknowledgeBackfill(global::OpenMatch.AcknowledgeBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeBackfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
      /// This triggers an assignment process.
      /// BETA FEATURE WARNING: This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.AcknowledgeBackfillResponse AcknowledgeBackfill(global::OpenMatch.AcknowledgeBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_AcknowledgeBackfill, null, options, request);
      }
      /// <summary>
      /// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
      /// This triggers an assignment process.
      /// BETA FEATURE WARNING: This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.AcknowledgeBackfillResponse> AcknowledgeBackfillAsync(global::OpenMatch.AcknowledgeBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return AcknowledgeBackfillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// AcknowledgeBackfill is used to notify OpenMatch about GameServer connection info
      /// This triggers an assignment process.
      /// BETA FEATURE WARNING: This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.AcknowledgeBackfillResponse> AcknowledgeBackfillAsync(global::OpenMatch.AcknowledgeBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_AcknowledgeBackfill, null, options, request);
      }
      /// <summary>
      /// CreateBackfill creates a new Backfill object.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill CreateBackfill(global::OpenMatch.CreateBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBackfill creates a new Backfill object.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill CreateBackfill(global::OpenMatch.CreateBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_CreateBackfill, null, options, request);
      }
      /// <summary>
      /// CreateBackfill creates a new Backfill object.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> CreateBackfillAsync(global::OpenMatch.CreateBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CreateBackfillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// CreateBackfill creates a new Backfill object.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> CreateBackfillAsync(global::OpenMatch.CreateBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_CreateBackfill, null, options, request);
      }
      /// <summary>
      /// DeleteBackfill receives a backfill ID and deletes its resource.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackfill(global::OpenMatch.DeleteBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteBackfill receives a backfill ID and deletes its resource.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::Google.Protobuf.WellKnownTypes.Empty DeleteBackfill(global::OpenMatch.DeleteBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_DeleteBackfill, null, options, request);
      }
      /// <summary>
      /// DeleteBackfill receives a backfill ID and deletes its resource.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackfillAsync(global::OpenMatch.DeleteBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return DeleteBackfillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// DeleteBackfill receives a backfill ID and deletes its resource.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::Google.Protobuf.WellKnownTypes.Empty> DeleteBackfillAsync(global::OpenMatch.DeleteBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_DeleteBackfill, null, options, request);
      }
      /// <summary>
      /// GetBackfill returns a backfill object by its ID.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill GetBackfill(global::OpenMatch.GetBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBackfill returns a backfill object by its ID.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill GetBackfill(global::OpenMatch.GetBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_GetBackfill, null, options, request);
      }
      /// <summary>
      /// GetBackfill returns a backfill object by its ID.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> GetBackfillAsync(global::OpenMatch.GetBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return GetBackfillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// GetBackfill returns a backfill object by its ID.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> GetBackfillAsync(global::OpenMatch.GetBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_GetBackfill, null, options, request);
      }
      /// <summary>
      /// UpdateBackfill updates search_fields and extensions for the backfill with the provided id.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill UpdateBackfill(global::OpenMatch.UpdateBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackfill(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateBackfill updates search_fields and extensions for the backfill with the provided id.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual global::OpenMatch.Backfill UpdateBackfill(global::OpenMatch.UpdateBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_UpdateBackfill, null, options, request);
      }
      /// <summary>
      /// UpdateBackfill updates search_fields and extensions for the backfill with the provided id.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> UpdateBackfillAsync(global::OpenMatch.UpdateBackfillRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UpdateBackfillAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      /// UpdateBackfill updates search_fields and extensions for the backfill with the provided id.
      /// Any tickets waiting for this backfill will be returned to the active pool, no longer pending.
      /// BETA FEATURE WARNING:  This call and the associated Request and Response
      /// messages are not finalized and still subject to possible change or removal.
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      public virtual grpc::AsyncUnaryCall<global::OpenMatch.Backfill> UpdateBackfillAsync(global::OpenMatch.UpdateBackfillRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_UpdateBackfill, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      [global::System.CodeDom.Compiler.GeneratedCode("grpc_csharp_plugin", null)]
      protected override FrontendServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new FrontendServiceClient(configuration);
      }
    }

  }
}
#endregion
